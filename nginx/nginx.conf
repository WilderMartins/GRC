events {
    worker_connections 1024;
}

http {
    # Configurações Gzip (descomentar e ajustar para produção)
    # gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6; # Nível de compressão (1-9)
    # gzip_min_length 256; # Não comprime respostas menores que este tamanho
    # gzip_types
    #    text/plain
    #    text/css
    #    text/xml
    #    application/json
    #    application/javascript
    #    application/x-javascript
    #    application/xml
    #    application/xml+rss
    #    application/atom+xml
    #    image/svg+xml;

    server {
        listen 80;
        server_name localhost; # Ou o nome do host que será usado

        # Se o frontend for servido pelo Nginx ou por outro contêiner,
        # a configuração da raiz (/) precisará ser ajustada.
        # Por agora, vamos assumir que o frontend pode rodar em sua própria porta (ex: 3000)
        # e o Nginx pode opcionalmente fazer proxy para ele também, ou o usuário acessa diretamente.
        # Para este exemplo, a raiz não faz proxy para o backend.
        location / {
            # Servir o frontend Next.js exportado estaticamente
            root /usr/share/nginx/html/frontend_out; # Ajustar este caminho conforme o volume montado
            try_files $uri $uri/ /index.html; # Para roteamento do lado do cliente do Next.js (SPA-like)

            # Headers de Segurança (Exemplos - descomentar e ajustar conforme necessário)
            # add_header X-Frame-Options "SAMEORIGIN" always;
            # add_header X-XSS-Protection "1; mode=block" always;
            # add_header X-Content-Type-Options "nosniff" always;
            # add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' http://backend:8080;" always;
            # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

            # Otimizações para ativos estáticos (descomentar e ajustar caminhos/tipos se necessário)
            # location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|webp|svg|woff|woff2|ttf|eot)$ {
            #     root /usr/share/nginx/html/frontend_out; # Deve corresponder à raiz do frontend
            #     expires 1y;
            #     add_header Cache-Control "public";
            #     access_log off;
            # }
        }

        # Configuração SSL/TLS (Exemplo - descomentar e configurar com seus certificados)
        # listen 443 ssl http2;
        # server_name your_domain.com;
        #
        # ssl_certificate /etc/nginx/ssl/your_domain.crt; # Caminho para seu certificado
        # ssl_certificate_key /etc/nginx/ssl/your_domain.key; # Caminho para sua chave privada
        #
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_prefer_server_ciphers off;
        # ssl_ciphers ECDH+AESGCM:ECDH+CHACHA20; # Cipher suites modernas
        # ssl_session_timeout 1d;
        # ssl_session_cache shared:SSL:10m;
        # ssl_session_tickets off;
        #
        # # Redirecionar HTTP para HTTPS (se listen 80 também estiver ativo para este server_name)
        # if ($scheme != "https") {
        #     return 301 https://$host$request_uri;
        # }

        location /api/ {
            proxy_pass http://backend:8080/api/; # Backend service runs on port 8080 internally
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /auth/ {
            proxy_pass http://backend:8080/auth/; # Backend service runs on port 8080 internally
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /health {
            proxy_pass http://backend:8080/health; # Backend service runs on port 8080 internally
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
