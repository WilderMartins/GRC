# Stage 1: Build a Go binary
FROM golang:1.24-alpine AS builder

# Set the Current Working Directory inside the container
WORKDIR /app/backend

# We want to populate the module cache based on the go.mod and go.sum files.
COPY backend/go.mod backend/go.sum ./
RUN go mod download && go mod verify

# Copy the source code
COPY backend/ ./

# Build the Go app
# The -o /app/server will output the executable to /app/server inside the container
# CGO_ENABLED=0 produces a statically linked binary (no external C dependencies)
# -ldflags="-s -w" strips debugging information, reducing binary size
RUN CGO_ENABLED=0 GOOS=linux go build -a -ldflags="-s -w" -o /app/server ./cmd/server

# Stage 2: Create the final, small image
FROM alpine:3.19 # Pin to a specific version

# Add ca-certificates in case your app needs to make HTTPS requests
# Add curl for healthcheck
# Create a non-root user and group
RUN apk --no-cache add ca-certificates curl && \
    addgroup -S appgroup && \
    adduser -S appuser -G appgroup

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/server .

# Chown the application directory and binary to the appuser
RUN chown -R appuser:appgroup /app

# Switch to the non-root user
USER appuser

# Expose port (default 8080, or set by SERVER_PORT) to the outside world
EXPOSE 8080

# Healthcheck to verify the application is running
# Note: Adjust port if your application internally listens on a different port than exposed,
# though for this setup, 8080 is consistently used.
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Command to run the executable which is now the Gin HTTP server.
CMD ["./server"]
