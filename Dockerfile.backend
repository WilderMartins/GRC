# Estágio 1: Builder - Compila a aplicação Go
FROM golang:1.24-alpine AS builder

WORKDIR /app

# Instalar git, que é necessário para o 'go mod download' buscar dependências de repositórios
RUN apk --no-cache add git

# Copiar apenas os arquivos de gerenciamento de dependências primeiro
# Isso aproveita o cache do Docker se os arquivos não mudarem
COPY backend/go.mod backend/go.sum ./
RUN go mod download

# Copiar o restante do código-fonte do backend
COPY backend/ ./

# Compilar a aplicação
# -o /app/server: Define o nome e local do arquivo de saída
# CGO_ENABLED=0: Cria um binário estaticamente linkado
# -ldflags="-s -w": Remove informações de debug para reduzir o tamanho do binário
RUN CGO_ENABLED=0 GOOS=linux go build -a -ldflags="-s -w" -o /app/server ./cmd/server

# Estágio 2: Final - Cria a imagem final, leve e segura
FROM alpine:3.19

# Instalar ca-certificates para comunicação HTTPS e curl para o healthcheck
RUN apk --no-cache add ca-certificates curl

# Criar um usuário e grupo não-root para rodar a aplicação
# Medida de segurança para evitar rodar como root
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

WORKDIR /app

# Copiar o binário compilado do estágio 'builder'
COPY --from=builder /app/server .

# Definir o usuário não-root como proprietário dos arquivos da aplicação
RUN chown -R appuser:appgroup /app

# Mudar para o usuário não-root
USER appuser

# Expor a porta 8080, que é a porta padrão da nossa API
EXPOSE 8080

# Healthcheck para verificar se a aplicação está respondendo
HEALTHCHECK --interval=30s --timeout=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Comando para iniciar o servidor da aplicação
CMD ["./server"]
