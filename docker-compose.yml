version: '3.8'

services:
  backend:
    build:
      context: . # Context is the root of the project
      dockerfile: Dockerfile.backend
    container_name: phoenix_grc_backend
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
    ports:
      - "${SERVER_PORT:-8080}:8080" # Map host port to container port (default 8080)
    environment:
      GIN_MODE: ${GIN_MODE:-debug} # or "release"
      SERVER_PORT: ${SERVER_PORT:-8080}
      # Database connection details read by the Go application
      POSTGRES_HOST: db # Service name of the postgres container
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_DB: ${POSTGRES_DB:-phoenix_grc_dev}
      POSTGRES_SSLMODE: ${POSTGRES_SSLMODE:-disable}
      # For TimeZone=UTC in DSN
    volumes:
      # For development, you might want to mount your local code into the container
      # to enable hot reloading if you use a tool like Air or realize.
      # However, for a simple compiled Go binary, this is less critical unless
      # you're rebuilding and restarting the container frequently.
      # - ./backend:/app/backend # Example for live reload tools
      - ./backend_artifacts:/app/artifacts # Example if we had artifacts to store
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: phoenix_grc_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_DB: ${POSTGRES_DB:-phoenix_grc_dev}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Expose DB port to host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-phoenix_grc_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
