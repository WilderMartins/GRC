version: '3.8'

services:
  backend:
    build:
      context: . # Context is the root of the project
      dockerfile: Dockerfile.backend
    container_name: phoenix_grc_backend
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
    ports:
      - "${SERVER_PORT:-8080}:8080" # Map host port to container port (default 8080)
    environment:
      GIN_MODE: ${GIN_MODE:-debug} # or "release"
      SERVER_PORT: ${SERVER_PORT:-8080}
      # Database connection details read by the Go application
      POSTGRES_HOST: db # Service name of the postgres container
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_DB: ${POSTGRES_DB:-phoenix_grc_dev}
      POSTGRES_SSLMODE: ${POSTGRES_SSLMODE:-disable}
      # For TimeZone=UTC in DSN
    volumes:
      # For development, you might want to mount your local code into the container
      # to enable hot reloading if you use a tool like Air or realize.
      # However, for a simple compiled Go binary, this is less critical unless
      # you're rebuilding and restarting the container frequently.
      # - ./backend:/app/backend # Example for live reload tools
      - ./backend_artifacts:/app/artifacts # Example if we had artifacts to store
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: phoenix_grc_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_DB: ${POSTGRES_DB:-phoenix_grc_dev}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Expose DB port to host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-phoenix_grc_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: phoenix_grc_nginx
    ports:
      - "${NGINX_PORT:-80}:80" # Expose Nginx on port 80 (or custom via NGINX_PORT)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Mount custom nginx config
      # If serving static frontend files via Nginx:
      # - ./frontend/out:/usr/share/nginx/html:ro # Example for Next.js static export
    depends_on:
      - backend
    environment:
      # Pass SERVER_PORT to Nginx so it knows where the backend is.
      # This is used by nginx.conf for `proxy_pass http://backend:${SERVER_PORT:-8080}`.
      # Nginx doesn't directly use this env var in its own config parsing,
      # but it's a common pattern to pass it for entrypoint scripts that might process the conf.
      # For direct use in nginx.conf, a tool like `envsubst` is needed at container startup,
      # or hardcode the port if it's fixed within the docker network.
      # For this setup, nginx.conf uses `${SERVER_PORT:-8080}` which requires envsubst.
      # A simpler nginx.conf would hardcode `backend:8080`.
      # Let's assume for now the Nginx image or an entrypoint handles env var substitution in nginx.conf,
      # or we simplify nginx.conf. For robustness, we'll ensure Nginx can resolve `backend:8080`.
      # The `${SERVER_PORT:-8080}` in nginx.conf only works if `envsubst` is run on the conf file.
      # For a standard nginx image, it's better to hardcode the internal port or use a fixed one.
      # Let's simplify and assume backend is always on 8080 internally from Nginx's perspective.
      # The `backend` service itself maps SERVER_PORT from host to its internal 8080.
      # So Nginx can always talk to `backend:8080`.
      # The SERVER_PORT variable here is more for documentation or if an entrypoint script uses it.
      SERVER_PORT_BACKEND: ${SERVER_PORT:-8080} # Informational, actual proxy_pass uses service name and internal port
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
