version: '3.4'

networks:
  grc_network:
    driver: bridge

services:
  backend:
    networks:
      - grc_network
    build:
      context: . # Context is the root of the project
      dockerfile: Dockerfile.backend
    container_name: phoenix_grc_backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${SERVER_PORT:-8080}:8080" # Map host port to container port (default 8080)
    environment:
      GIN_MODE: ${GIN_MODE:-debug} # or "release"
      SERVER_PORT: ${SERVER_PORT:-8080}
      # Database connection details read by the Go application
      POSTGRES_HOST: db # Service name of the postgres container
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_DB: ${POSTGRES_DB:-phoenix_grc_dev}
      POSTGRES_SSLMODE: ${POSTGRES_SSLMODE:-disable}
      # For TimeZone=UTC in DSN
    volumes: []
    restart: unless-stopped

  db:
    networks:
      - grc_network
    image: postgres:16.2-alpine # Pinned to a specific patch version
    container_name: phoenix_grc_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_DB: ${POSTGRES_DB:-phoenix_grc_dev}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - "postgres_data:/var/lib/postgresql/data/pgdata"
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Expose DB port to host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-phoenix_grc_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  nginx:
    networks:
      - grc_network
    image: nginx:1.25-alpine # Pinned to a specific version
    container_name: phoenix_grc_nginx
    ports:
      - "${NGINX_PORT:-80}:80" # Porta HTTP
      - "443:443" # Porta HTTPS
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./nginx/ssl:/etc/nginx/ssl:ro" # Monta os certificados SSL
      - "./frontend/out:/usr/share/nginx/html/frontend_out:ro"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
