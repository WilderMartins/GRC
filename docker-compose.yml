version: '3.8'

networks:
  grc_network:
    driver: bridge

services:
  # Serviço do Backend (Go API)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: phoenix_grc_backend
    networks:
      - grc_network
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      - GIN_MODE=${GIN_MODE:-release}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password123}
      - POSTGRES_DB=${POSTGRES_DB:-phoenix_grc_prod}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE:-disable}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Serviço do Banco de Dados (PostgreSQL)
  db:
    image: postgres:16.2-alpine
    container_name: phoenix_grc_db
    networks:
      - grc_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password123}
      - POSTGRES_DB=${POSTGRES_DB:-phoenix_grc_prod}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-phoenix_grc_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Serviço do Frontend (Builder)
  # Este serviço constrói o frontend e seus artefatos (arquivos estáticos).
  # Ele não é executado continuamente; apenas serve como uma fonte para o Nginx.
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: phoenix_grc_frontend_builder
    volumes:
      - frontend_static:/app/out
    restart: "no" # Não precisa reiniciar, só existe para o build inicial

  # Serviço do Nginx (Proxy Reverso e Servidor Web)
  nginx:
    image: nginx:1.25-alpine
    container_name: phoenix_grc_nginx
    networks:
      - grc_network
    ports:
      - "${NGINX_PORT:-80}:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # Monta o volume com os arquivos estáticos construídos pelo serviço 'frontend'
      - frontend_static:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  frontend_static:
    driver: local
