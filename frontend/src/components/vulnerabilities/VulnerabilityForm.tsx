import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import apiClient from '@/lib/axios'; // Ajuste o path
import { useNotifier } from '@/hooks/useNotifier'; // Importar o hook

// Tipos (podem vir de um arquivo compartilhado no futuro)
type VulnerabilitySeverity = "Baixo" | "Médio" | "Alto" | "Crítico" | ""; // Permitir string vazia para select inicial
type VulnerabilityStatus = "descoberta" | "em_correcao" | "corrigida";

interface VulnerabilityFormData {
  title: string;
  description: string;
  cve_id: string; // Opcional no backend, mas o campo existe
  severity: VulnerabilitySeverity;
  status: VulnerabilityStatus;
  asset_affected: string;
}

interface VulnerabilityFormProps {
  initialData?: VulnerabilityFormData & { id?: string }; // Para edição
  isEditing?: boolean;
  onSubmitSuccess?: () => void; // Callback para sucesso
}

const VulnerabilityForm: React.FC<VulnerabilityFormProps> = ({ initialData, isEditing = false, onSubmitSuccess }) => {
  const router = useRouter();
  const [formData, setFormData] = useState<VulnerabilityFormData>({
    title: '',
    description: '',
    cve_id: '',
    severity: '', // Default para select
    status: 'descoberta', // Default
    asset_affected: '',
    ...(initialData || {}),
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const notify = useNotifier(); // Instanciar o notifier

  useEffect(() => {
    if (initialData) {
      setFormData({ ...initialData });
    }
  }, [initialData]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    if (!formData.severity) {
        setError("Severidade é obrigatória.");
        setIsLoading(false);
        return;
    }

    // Remover cve_id se estiver vazio, para não enviar string vazia se o backend espera null ou ausência
    const payload = { ...formData };
    if (payload.cve_id === "") {
        delete (payload as any).cve_id;
    }


    try {
      if (isEditing && initialData?.id) {
        await apiClient.put(`/vulnerabilities/${initialData.id}`, payload);
        // alert('Vulnerabilidade atualizada com sucesso!'); // Substituir
      } else {
        await apiClient.post('/vulnerabilities', payload);
        // alert('Vulnerabilidade criada com sucesso!'); // Substituir
      }
      if (onSubmitSuccess) {
        onSubmitSuccess();
      } else {
        router.push('/admin/vulnerabilities'); // Redirecionar para a lista por padrão
      }
    } catch (err: any) {
      console.error("Erro ao salvar vulnerabilidade:", err);
      setError(err.response?.data?.error || err.message || "Falha ao salvar vulnerabilidade.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && <p className="text-red-500 bg-red-100 p-3 rounded-md">{error}</p>}

      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Título da Vulnerabilidade</label>
        <input type="text" name="title" id="title" value={formData.title} onChange={handleChange} required minLength={3} maxLength={255}
               className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
      </div>

      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Descrição</label>
        <textarea name="description" id="description" value={formData.description} onChange={handleChange} rows={4}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="cve_id" className="block text-sm font-medium text-gray-700 dark:text-gray-300">CVE ID (Opcional)</label>
          <input type="text" name="cve_id" id="cve_id" value={formData.cve_id} onChange={handleChange} maxLength={50}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
        </div>
        <div>
          <label htmlFor="asset_affected" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Ativo Afetado</label>
          <input type="text" name="asset_affected" id="asset_affected" value={formData.asset_affected} onChange={handleChange} maxLength={255}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="severity" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Severidade</label>
          <select name="severity" id="severity" value={formData.severity} onChange={handleChange} required
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2">
            <option value="" disabled>Selecione a Severidade</option>
            <option value="Baixo">Baixo</option>
            <option value="Médio">Médio</option>
            <option value="Alto">Alto</option>
            <option value="Crítico">Crítico</option>
          </select>
        </div>
        <div>
          <label htmlFor="status" className="block text-sm font-medium text-gray-700 dark:text-gray-300">Status</label>
          <select name="status" id="status" value={formData.status} onChange={handleChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2">
            <option value="descoberta">Descoberta</option>
            <option value="em_correcao">Em Correção</option>
            <option value="corrigida">Corrigida</option>
          </select>
        </div>
      </div>

      <div className="flex justify-end space-x-3 pt-4">
        <button type="button" onClick={() => router.push('/admin/vulnerabilities')}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 rounded-md shadow-sm">
          Cancelar
        </button>
        <button type="submit" disabled={isLoading}
                className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-md shadow-sm disabled:opacity-50 flex items-center">
          {isLoading && (
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          )}
          {isEditing ? 'Salvar Alterações' : 'Criar Vulnerabilidade'}
        </button>
      </div>
    </form>
  );
};

export default VulnerabilityForm;
