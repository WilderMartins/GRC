import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import apiClient from '@/lib/axios';
import { useNotifier } from '@/hooks/useNotifier';
import { VulnerabilitySeverity, VulnerabilityStatus } from '@/types';
import { useTranslation } from 'next-i18next'; // Importar useTranslation

interface VulnerabilityFormData {
  title: string;
  description: string;
  cve_id: string;
  severity: VulnerabilitySeverity;
  status: VulnerabilityStatus;
  asset_affected: string;
}

interface VulnerabilityFormProps {
  initialData?: VulnerabilityFormData & { id?: string };
  isEditing?: boolean;
  onSubmitSuccess?: () => void;
}

const VulnerabilityForm: React.FC<VulnerabilityFormProps> = ({ initialData, isEditing = false, onSubmitSuccess }) => {
  const { t } = useTranslation(['vulnerabilities', 'common']); // Adicionar hook
  const router = useRouter();
  const [formData, setFormData] = useState<VulnerabilityFormData>({
    title: '',
    description: '',
    cve_id: '',
    severity: '',
    status: 'descoberta',
    asset_affected: '',
    ...(initialData || {}),
  });
  const [isLoading, setIsLoading] = useState(false);
  const [formError, setFormError] = useState<string | null>(null); // Renomeado de 'error'
  const notify = useNotifier();

  useEffect(() => {
    if (initialData) {
      // Garantir que os valores dos selects sejam compatíveis com os tipos de enum
      setFormData({
        ...initialData,
        severity: initialData.severity as VulnerabilitySeverity,
        status: initialData.status as VulnerabilityStatus,
      });
    }
  }, [initialData]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value as any })); // as any para os tipos de enum
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setFormError(null);

    if (!formData.title || formData.title.trim() === "") {
        setFormError(t('form.error_title_required'));
        setIsLoading(false);
        return;
    }

    if (!formData.severity) {
        setFormError(t('form.error_severity_required'));
        setIsLoading(false);
        return;
    }

    const payload = { ...formData };
    if (payload.cve_id === "") {
        delete (payload as any).cve_id;
    }

    try {
      if (isEditing && initialData?.id) {
        await apiClient.put(`/api/v1/vulnerabilities/${initialData.id}`, payload);
        notify.success(t('form.update_success_message'));
      } else {
        await apiClient.post('/api/v1/vulnerabilities', payload);
        notify.success(t('form.create_success_message'));
      }
      if (onSubmitSuccess) {
        onSubmitSuccess();
      } else {
        router.push('/admin/vulnerabilities');
      }
    } catch (err: any) {
      console.error("Erro ao salvar vulnerabilidade:", err);
      const apiError = err.response?.data?.error || t('common:unknown_error');
      // setFormError(apiError); // Opcional
      notify.error(t('form.save_error_message', { message: apiError }));
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {formError && <p className="text-red-500 bg-red-100 p-3 rounded-md">{formError}</p>}

      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t('form.field_title_label')}</label>
        <input type="text" name="title" id="title" value={formData.title} onChange={handleChange} required minLength={3} maxLength={255}
               className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-brand-primary focus:ring-brand-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
      </div>

      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t('form.field_description_label')}</label>
        <textarea name="description" id="description" value={formData.description} onChange={handleChange} rows={4}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-brand-primary focus:ring-brand-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="cve_id" className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t('form.field_cve_id_label')}</label>
          <input type="text" name="cve_id" id="cve_id" value={formData.cve_id} onChange={handleChange} maxLength={50}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-brand-primary focus:ring-brand-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
        </div>
        <div>
          <label htmlFor="asset_affected" className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t('form.field_asset_affected_label')}</label>
          <input type="text" name="asset_affected" id="asset_affected" value={formData.asset_affected} onChange={handleChange} maxLength={255}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-brand-primary focus:ring-brand-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2"/>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="severity" className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t('form.field_severity_label')}</label>
          <select name="severity" id="severity" value={formData.severity} onChange={handleChange} required
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-brand-primary focus:ring-brand-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2">
            <option value="" disabled>{t('form.option_select_severity')}</option>
            <option value="Baixo">{t('form.option_severity_low')}</option>
            <option value="Médio">{t('form.option_severity_medium')}</option>
            <option value="Alto">{t('form.option_severity_high')}</option>
            <option value="Crítico">{t('form.option_severity_critical')}</option>
          </select>
        </div>
        <div>
          <label htmlFor="status" className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t('form.field_status_label')}</label>
          <select name="status" id="status" value={formData.status} onChange={handleChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-brand-primary focus:ring-brand-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white p-2">
            {/* <option value="" disabled>{t('common_placeholders.select_status')}</option> */}
            <option value="descoberta">{t('form.option_status_discovered')}</option>
            <option value="em_correcao">{t('form.option_status_in_remediation')}</option>
            <option value="corrigida">{t('form.option_status_remediated')}</option>
          </select>
        </div>
      </div>

      <div className="flex justify-end space-x-3 pt-4">
        <button type="button" onClick={() => router.push('/admin/vulnerabilities')}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 rounded-md shadow-sm transition-colors">
          {t('common:cancel_button')}
        </button>
        <button type="submit" disabled={isLoading}
                className="px-4 py-2 text-sm font-medium text-white bg-brand-primary hover:bg-brand-primary/90 focus:ring-brand-primary rounded-md shadow-sm disabled:opacity-50 flex items-center transition-colors">
          {isLoading && (
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          )}
          {isEditing ? t('common:save_changes_button') : t('common:create_button')}
        </button>
      </div>
    </form>
  );
};

export default VulnerabilityForm;
